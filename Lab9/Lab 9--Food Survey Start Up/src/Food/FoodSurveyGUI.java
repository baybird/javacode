package Food;

import java.awt.Toolkit;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * <pre>
 * Class        FoodSurveyGUI.java
 * Description  A class representing the GUI used in a food survey application.
 * Project      Food Survey
 * Platform     Mac, Big Sur 11.2.3, jdk 1.8.0_241, NetBeans IDE 12.3
 * Date         6/2/2021
 * @author	<i>Robert Tang</i>
 * @version %1% %4%
 * @see javax.swing.JFrame
 * @see java.util.ArrayList
 * </pre>
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */
public class FoodSurveyGUI extends javax.swing.JFrame {

    private ArrayList foodItems = new ArrayList();

    // two-dimensional array to store survey results
    private int foodChoices[][];

    // external file name of artists
    private String fileName = "src/Food/Foods.txt";
    private int totalLikes = 0, totalDisliks = 0;

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Constructor  FoodSurveyGUI()-default constructor
     * Description  Create an instance of the GUI form, set the default
     *              JButton to be addJButton, set icon image, center form,
     *              read foods from external file.
     * @author      <i>Robert Tang</i>
     * @see java.awt.Toolkit
     * Date 6/2/2021
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    public FoodSurveyGUI() throws IOException {
        initComponents();

        this.getRootPane().setDefaultButton(addJButton);
        this.setIconImage(Toolkit.getDefaultToolkit().getImage("src/Images/Foods_small.png"));

        // Read from the external file
        readFromFile(fileName);

        // Resize foodChoices array
        foodChoices = new int[foodItems.size()][2];

        // fill foodsComboBox with food items
        fillComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        foodsJButtonGroup = new javax.swing.ButtonGroup();
        foodsJScrollPane = new javax.swing.JScrollPane();
        displayJTextArea = new javax.swing.JTextArea();
        voteJPanel = new javax.swing.JPanel();
        foodJComboBox = new javax.swing.JComboBox<>();
        likeJRadioButton = new javax.swing.JRadioButton();
        dislikeJRadioButton = new javax.swing.JRadioButton();
        addJButton = new javax.swing.JButton();
        photoJLabel = new javax.swing.JLabel();
        titleJLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileJMenu = new javax.swing.JMenu();
        newJMenuItem = new javax.swing.JMenuItem();
        printFoodJMenuItem = new javax.swing.JMenuItem();
        printJMenuItem = new javax.swing.JMenuItem();
        fileJSeparator = new javax.swing.JPopupMenu.Separator();
        exitJMenuItem = new javax.swing.JMenuItem();
        helpJMenu = new javax.swing.JMenu();
        aboutJMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Lab 9--Food Survey");
        setResizable(false);

        displayJTextArea.setEditable(false);
        displayJTextArea.setColumns(20);
        displayJTextArea.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        displayJTextArea.setRows(5);
        displayJTextArea.setWrapStyleWord(true);
        foodsJScrollPane.setViewportView(displayJTextArea);

        foodJComboBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        foodJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foodJComboBoxActionPerformed(evt);
            }
        });

        foodsJButtonGroup.add(likeJRadioButton);
        likeJRadioButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        likeJRadioButton.setMnemonic('L');
        likeJRadioButton.setSelected(true);
        likeJRadioButton.setText("Like");

        foodsJButtonGroup.add(dislikeJRadioButton);
        dislikeJRadioButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dislikeJRadioButton.setMnemonic('D');
        dislikeJRadioButton.setText("Dislike");

        addJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        addJButton.setText("Add");
        addJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJButtonActionPerformed(evt);
            }
        });

        photoJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Pad Thai.jpg"))); // NOI18N

        javax.swing.GroupLayout voteJPanelLayout = new javax.swing.GroupLayout(voteJPanel);
        voteJPanel.setLayout(voteJPanelLayout);
        voteJPanelLayout.setHorizontalGroup(
            voteJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, voteJPanelLayout.createSequentialGroup()
                .addGroup(voteJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(voteJPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(foodJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(voteJPanelLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(photoJLabel)))
                .addGap(18, 18, 18)
                .addGroup(voteJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(voteJPanelLayout.createSequentialGroup()
                        .addComponent(likeJRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dislikeJRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(voteJPanelLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(addJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 16, Short.MAX_VALUE)))
                .addContainerGap())
        );
        voteJPanelLayout.setVerticalGroup(
            voteJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(voteJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(voteJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(foodJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(likeJRadioButton)
                    .addComponent(dislikeJRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(voteJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(photoJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        titleJLabel.setFont(new java.awt.Font("Tempus Sans ITC", 2, 32)); // NOI18N
        titleJLabel.setForeground(new java.awt.Color(0, 102, 102));
        titleJLabel.setText("Welcome to Food Survey");

        fileJMenu.setMnemonic('F');
        fileJMenu.setText("File");

        newJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        newJMenuItem.setMnemonic('N');
        newJMenuItem.setText("New");
        newJMenuItem.setToolTipText("Load new artist DB");
        newJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(newJMenuItem);

        printFoodJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        printFoodJMenuItem.setMnemonic('P');
        printFoodJMenuItem.setText("Print");
        printFoodJMenuItem.setToolTipText("Print selected artist details");
        printFoodJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printFoodJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(printFoodJMenuItem);

        printJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        printJMenuItem.setMnemonic('t');
        printJMenuItem.setText("Print Form");
        printJMenuItem.setToolTipText("Print Form as GUI");
        printJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(printJMenuItem);
        fileJMenu.add(fileJSeparator);

        exitJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        exitJMenuItem.setMnemonic('x');
        exitJMenuItem.setText("Exit");
        exitJMenuItem.setToolTipText("End application");
        exitJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(exitJMenuItem);

        jMenuBar1.add(fileJMenu);

        helpJMenu.setMnemonic('H');
        helpJMenu.setText("Help");

        aboutJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        aboutJMenuItem.setMnemonic('A');
        aboutJMenuItem.setText("About");
        aboutJMenuItem.setToolTipText("Show About form");
        aboutJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutJMenuItemActionPerformed(evt);
            }
        });
        helpJMenu.add(aboutJMenuItem);

        jMenuBar1.add(helpJMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(titleJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(foodsJScrollPane)
                        .addComponent(voteJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(voteJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(foodsJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       fillComboBox
     * Description  Fill foodJComboBox with food items from ArrayList of foods.
     * @author      <i>Robert Tang</i>
     * Date 6/2/2021
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    void fillComboBox() {
        for (Object food : foodItems) {
            foodJComboBox.addItem(food.toString());
        }
    }

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       newJMenuItemActionPerformed()
     * Description  Select new set of food items with JFileChooser.
     * @param       evt java.awt.event.ActionEvent
     * @author      <i>Robert Tang</i>
     * Date 6/2/2021
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void newJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newJMenuItemActionPerformed
    {//GEN-HEADEREND:event_newJMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser("src/Foods");
        //Filter only txt files
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Txt Files", "txt");
        chooser.setFileFilter(filter);
        chooser.setCurrentDirectory(new File("./src/Food/"));
        int choice = chooser.showOpenDialog(null);
        if (choice == JFileChooser.APPROVE_OPTION) {
            File chosenFile = chooser.getSelectedFile();
            fileName = "./src/Food/" + chosenFile.getName();
            try {
                totalDisliks = 0;
                totalLikes = 0;
                foodChoices = new int[foodItems.size()][2];
                displayJTextArea.setText("");
                readFromFile(fileName);
            } catch (IOException ex) {
                Logger.getLogger(FoodSurveyGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_newJMenuItemActionPerformed

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       readFromFile
     * Description  Reads foods from a text file and add to ArrayList of foods.
     * @author      <i>Robert Tang</i>
     * Date 6/2/2021
     * @param file String
     * @see Artist
     * @see java.util.StringTokenizer
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    void readFromFile(String file) throws IOException {
        try {
            FileReader inputFile = new FileReader(file);

            BufferedReader input = new BufferedReader(inputFile);
            foodItems.removeAll(foodItems);
            String line = input.readLine();
            while (line != null) // read as long as there are artists in file
            {
                foodItems.add(line);
                line = input.readLine();	// read next line
            }

            input.close();
        } catch (FileNotFoundException exp) {
            JOptionPane.showMessageDialog(null, file + " does not exist",
                    "File Input Error", JOptionPane.WARNING_MESSAGE);
            JFileChooser chooser = new JFileChooser("src/Foods");

            FileNameExtensionFilter filter = new FileNameExtensionFilter(
                    "Txt Files", "txt");
            chooser.setFileFilter(filter);
            int choice = chooser.showOpenDialog(null);
            if (choice == JFileChooser.APPROVE_OPTION) {
                File chosenFile = chooser.getSelectedFile();
                file = "src/Foods/" + chosenFile.getName();
                readFromFile(file);
            } else {
                JOptionPane.showMessageDialog(null, "Unable to open file",
                        "File Input Error", JOptionPane.WARNING_MESSAGE);
            }
        } catch (IOException exp) {
            JOptionPane.showMessageDialog(null, "Unable to read file",
                    "File Input Error", JOptionPane.WARNING_MESSAGE);
        }
    }

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       printFoodJMenuItemActionPerformed()
     * Description  Print displayJTextArea.
     * @param       evt java.awt.event.ActionEvent
     * @author      <i>Robert Tang</i>
     * Date 6/2/2021
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void printFoodJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_printFoodJMenuItemActionPerformed
    {//GEN-HEADEREND:event_printFoodJMenuItemActionPerformed
        try {
            displayJTextArea.print();
        } catch (PrinterException ex) {
            JOptionPane.showMessageDialog(null, "Composer not Printed",
                    "Print Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_printFoodJMenuItemActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       printJMenuItemActionPerformed()
     * Description  Event handler to print the for as a GUI. Calls
     *              PrintUtilities.printComponent(this)
     * @author      <i>Robert Tang</i>
     * Date 6/2/2021
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void printJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_printJMenuItemActionPerformed
    {//GEN-HEADEREND:event_printJMenuItemActionPerformed
        //http://www.apl.jhu.edu/~hall/java/Swing-Tutorial/Swing-Tutorial-Printing.html
        PrintUtilities.printComponent(this);
    }//GEN-LAST:event_printJMenuItemActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       exitJMenuItemActionPerformed()
     * Description  Event handler to end the application. It calls the
     *              exitJButtonActionPerformed event handler
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * Date 6/2/2021
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void exitJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exitJMenuItemActionPerformed
    {//GEN-HEADEREND:event_exitJMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitJMenuItemActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       aboutJMenuItemActionPerformed()
     * Description  Event handler to display the About form.
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * Date 6/2/2021
     * @param evt java.awt.event.ActionEvent
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void aboutJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutJMenuItemActionPerformed
    {//GEN-HEADEREND:event_aboutJMenuItemActionPerformed
        About aboutWindow = new About(this, true);
        aboutWindow.setVisible(true);
    }//GEN-LAST:event_aboutJMenuItemActionPerformed

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       foodJComboBoxItemStateChanged()
     * Description  Main event handler keep track and display users responses
     *              on the survey and to display them. ArrayList foodItems
     *              contains food items and the 2-Dim array foodChoices of
     *              int keeps scores.
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * Date 6/2/2021
     * @param evt java.awt.event.ActionEvent
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void addJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addJButtonActionPerformed
    {//GEN-HEADEREND:event_addJButtonActionPerformed
        displayJTextArea.setText("Food\t\tLike\tDrslike");
        String hLine = "\n----------------------------------------------------------------"; 
        displayJTextArea.append(hLine);

        // index of selected food
        int index = foodJComboBox.getSelectedIndex();
        
        // looping 2-dimentional array
        for (int j = 0; j < foodChoices.length; j++){
            displayJTextArea.append("\n" + foodItems.get(j) + "\t\t");
            
            if (likeJRadioButton.isSelected() && index == j){
                foodChoices[j][0]++;
                totalLikes++;
            }
            else if (dislikeJRadioButton.isSelected() && index == j){
                foodChoices[j][1]++;
                totalDisliks++;
            }// end if
            
            for(int k = 0; k < 2; k++){
                String endChar = (k == 0)?"\t":"";
                displayJTextArea.append(foodChoices[j][k] + endChar);
            }
        }// end for
        
        displayJTextArea.append(hLine);
        displayJTextArea.append("\nTotal\t\t" + totalLikes + "\t" + totalDisliks);
    }//GEN-LAST:event_addJButtonActionPerformed
    
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       foodJComboBoxActionPerformed()
     * Description  Change event for the food JComboBox. When a new food is selected
     *              it would change the food picture in the JLable.
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * Date 6/2/2021
     * @param evt java.awt.event.ActionEvent
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void foodJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foodJComboBoxActionPerformed
        setPicture(foodJComboBox.getSelectedItem().toString());
    }//GEN-LAST:event_foodJComboBoxActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Constructor  setPicture()
     * Description  Sets picture of artist in pictureJLabel
     * @param       label JLabel
     * @param folder String
     * @param name String
     * @author      <i>Robert Tang</i>
     * Date 6/2/2021
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    void setPicture(String selectedFoodName){
        photoJLabel.setIcon(new ImageIcon(getClass().getResource("/Images/"+selectedFoodName+".jpg")));
    }

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       main()
     * Description  Displays splash screen and main Artist GUI form
     * @param       args String[]
     * @author      <i>Robert Tang</i>
     * Date 6/2/2021
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    public static void main(String args[]) {
        // Show splash screen
        Splash mySplash = new Splash(4000);     // duration = 4 seconds
        mySplash.showSplash();                  // show splash screen
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FoodSurveyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FoodSurveyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FoodSurveyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FoodSurveyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FoodSurveyGUI().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(FoodSurveyGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutJMenuItem;
    private javax.swing.JButton addJButton;
    private javax.swing.JRadioButton dislikeJRadioButton;
    private javax.swing.JTextArea displayJTextArea;
    private javax.swing.JMenuItem exitJMenuItem;
    private javax.swing.JMenu fileJMenu;
    private javax.swing.JPopupMenu.Separator fileJSeparator;
    private javax.swing.JComboBox<String> foodJComboBox;
    private javax.swing.ButtonGroup foodsJButtonGroup;
    private javax.swing.JScrollPane foodsJScrollPane;
    private javax.swing.JMenu helpJMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JRadioButton likeJRadioButton;
    private javax.swing.JMenuItem newJMenuItem;
    private javax.swing.JLabel photoJLabel;
    private javax.swing.JMenuItem printFoodJMenuItem;
    private javax.swing.JMenuItem printJMenuItem;
    private javax.swing.JLabel titleJLabel;
    private javax.swing.JPanel voteJPanel;
    // End of variables declaration//GEN-END:variables
}
