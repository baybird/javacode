package lab7;

/**
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * <pre>
 * Class        PrimeNumbers
 * File         PrimeNumbers.java
 * Description	Displays prime numbers, tests for primeness, prime
 *              decomposition, and range of primes number and many others.
 * Environment	Mac, Big Sur 11.2.3, jdk 1.8.0_241, NetBeans IDE 12.3
 * Date         5/14/2010
 * @author	<i>Robert Tang</i>
 * @version	%3% %4%
 * @see javax.swing.Swing
 * </pre>
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */
import java.awt.print.PrinterException;
import javax.swing.*;
import java.awt.*;

public class PrimesGUI extends JFrame {

    /**
     * Class instance fields
     */
    private int whichRadio = 0;
    private final int MAX_INPUT = 1000000;  // maximum number of primes

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Constructor  PrimesGUI()-default constructor
     * Description  Create an instance of the GUI form, set the default
     *              JButton to be calculateJButton, set icon image, center form.
     * Date         5/14/2020
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    public PrimesGUI() {
        initComponents();
        this.getRootPane().setDefaultButton(calculateJButton);
        // center the form
        this.setLocationRelativeTo(null);       //center form
        // set background color
        this.getContentPane().setBackground(new Color(255, 255, 204));
        listAllJTextField.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radioJButtonGroup = new javax.swing.ButtonGroup();
        menuJButtonGroup = new javax.swing.ButtonGroup();
        choiceJPanel = new javax.swing.JPanel();
        listAllJRadioButton = new javax.swing.JRadioButton();
        listAllJTextField = new javax.swing.JTextField();
        isPrimeJRadioButton = new javax.swing.JRadioButton();
        isPrimeJTextField = new javax.swing.JTextField();
        factorizationJRadioButton = new javax.swing.JRadioButton();
        factorizationJTextField = new javax.swing.JTextField();
        rangeJRadioButton = new javax.swing.JRadioButton();
        lowJTextField = new javax.swing.JTextField();
        fromJLabel = new javax.swing.JLabel();
        toJLabel = new javax.swing.JLabel();
        highJTextField = new javax.swing.JTextField();
        goldbachJRadioButton = new javax.swing.JRadioButton();
        goldbachJTextField = new javax.swing.JTextField();
        palindromicJRadioButton = new javax.swing.JRadioButton();
        palindromicJTextField = new javax.swing.JTextField();
        emirpJRadioButton = new javax.swing.JRadioButton();
        emirpJTextField = new javax.swing.JTextField();
        sophieGermainJRadioButton = new javax.swing.JRadioButton();
        sophieGermainJTextField = new javax.swing.JTextField();
        safeJRadioButton = new javax.swing.JRadioButton();
        safeJTextField = new javax.swing.JTextField();
        fermatJRadioButton = new javax.swing.JRadioButton();
        fermatJTextField = new javax.swing.JTextField();
        displayJPanel = new javax.swing.JPanel();
        displayJScrollPanel = new javax.swing.JScrollPane();
        displayTextArea = new javax.swing.JTextArea();
        controlPanel = new javax.swing.JPanel();
        calculateJButton = new javax.swing.JButton();
        clearJButton = new javax.swing.JButton();
        printJButton = new javax.swing.JButton();
        quitJButton = new javax.swing.JButton();
        primesJMenuBar = new javax.swing.JMenuBar();
        fileJMenu = new javax.swing.JMenu();
        clearJMenuItem = new javax.swing.JMenuItem();
        printJMenuItem = new javax.swing.JMenuItem();
        exitJMenuItem = new javax.swing.JMenuItem();
        actionJMenu = new javax.swing.JMenu();
        listPrimesJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        testForPrimeJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        primeFactorizationJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        rangeOfPrimesJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        goldbachJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        palindromicJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        emirpJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        sophieGermainJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        safeJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        fermatJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        helpJMenu = new javax.swing.JMenu();
        aboutrJMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Prime Numbers");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/Images/PI.jpg")).getImage());
        setPreferredSize(new java.awt.Dimension(630, 510));
        setResizable(false);
        setSize(new java.awt.Dimension(630, 510));

        choiceJPanel.setBackground(new java.awt.Color(255, 204, 204));
        choiceJPanel.setMinimumSize(new java.awt.Dimension(270, 130));
        choiceJPanel.setPreferredSize(new java.awt.Dimension(290, 130));

        listAllJRadioButton.setBackground(new java.awt.Color(255, 204, 204));
        radioJButtonGroup.add(listAllJRadioButton);
        listAllJRadioButton.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        listAllJRadioButton.setSelected(true);
        listAllJRadioButton.setText("How many prime numbers?");
        listAllJRadioButton.setToolTipText("");
        listAllJRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listAllJRadioButtonItemStateChanged(evt);
            }
        });
        listAllJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listAllJRadioButtonActionPerformed(evt);
            }
        });

        listAllJTextField.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        listAllJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        listAllJTextField.setToolTipText("How many prime numbers do you wish from the first?");
        listAllJTextField.setVerifyInputWhenFocusTarget(false);
        listAllJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listAllJTextFieldActionPerformed(evt);
            }
        });

        isPrimeJRadioButton.setBackground(new java.awt.Color(255, 204, 204));
        radioJButtonGroup.add(isPrimeJRadioButton);
        isPrimeJRadioButton.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        isPrimeJRadioButton.setText("Is this a prime number?");
        isPrimeJRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                isPrimeJRadioButtonItemStateChanged(evt);
            }
        });
        isPrimeJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isPrimeJRadioButtonActionPerformed(evt);
            }
        });

        isPrimeJTextField.setEditable(false);
        isPrimeJTextField.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        isPrimeJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        isPrimeJTextField.setToolTipText("Test if provided integer ( > 2) is prime");
        isPrimeJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isPrimeJTextFieldActionPerformed(evt);
            }
        });

        factorizationJRadioButton.setBackground(new java.awt.Color(255, 204, 204));
        radioJButtonGroup.add(factorizationJRadioButton);
        factorizationJRadioButton.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        factorizationJRadioButton.setText("Find prime factorization of?");
        factorizationJRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                factorizationJRadioButtonItemStateChanged(evt);
            }
        });
        factorizationJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                factorizationJRadioButtonActionPerformed(evt);
            }
        });

        factorizationJTextField.setEditable(false);
        factorizationJTextField.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        factorizationJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        factorizationJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                factorizationJTextFieldActionPerformed(evt);
            }
        });

        rangeJRadioButton.setBackground(new java.awt.Color(255, 204, 204));
        radioJButtonGroup.add(rangeJRadioButton);
        rangeJRadioButton.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        rangeJRadioButton.setText("Range of prime numbers");
        rangeJRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rangeJRadioButtonItemStateChanged(evt);
            }
        });
        rangeJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rangeJRadioButtonActionPerformed(evt);
            }
        });

        lowJTextField.setEditable(false);
        lowJTextField.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        lowJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        lowJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowJTextFieldActionPerformed(evt);
            }
        });

        fromJLabel.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        fromJLabel.setText("From");

        toJLabel.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        toJLabel.setText("To");

        highJTextField.setEditable(false);
        highJTextField.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        highJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        highJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highJTextFieldActionPerformed(evt);
            }
        });

        goldbachJRadioButton.setBackground(new java.awt.Color(255, 204, 204));
        radioJButtonGroup.add(goldbachJRadioButton);
        goldbachJRadioButton.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        goldbachJRadioButton.setText("Goldbach's conjecture");
        goldbachJRadioButton.setToolTipText("Test Goldbach's Conjecture");
        goldbachJRadioButton.setActionCommand("goldbach");
        goldbachJRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                goldbachJRadioButtonItemStateChanged(evt);
            }
        });
        goldbachJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goldbachJRadioButtonActionPerformed(evt);
            }
        });

        goldbachJTextField.setEditable(false);
        goldbachJTextField.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        goldbachJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        goldbachJTextField.setToolTipText("Enter an even integer > 2");
        goldbachJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goldbachJTextFieldActionPerformed(evt);
            }
        });

        palindromicJRadioButton.setBackground(new java.awt.Color(255, 204, 204));
        radioJButtonGroup.add(palindromicJRadioButton);
        palindromicJRadioButton.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        palindromicJRadioButton.setText("How many palindromic primes?");
        palindromicJRadioButton.setToolTipText("<html>A palindromic prime is a number that is simultaneously palindromic and prime. <br>The first few (base-10) palindromic primes are 2, 3, 5, 7, 11, 101, 131, 151, 181, <br>191, 313, 353, 373, 383, 727, 757, 787, ...</html>");
        palindromicJRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                palindromicJRadioButtonItemStateChanged(evt);
            }
        });
        palindromicJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                palindromicJRadioButtonActionPerformed(evt);
            }
        });

        palindromicJTextField.setEditable(false);
        palindromicJTextField.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        palindromicJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        palindromicJTextField.setToolTipText("How many prime numbers do you wish from the first?");
        palindromicJTextField.setVerifyInputWhenFocusTarget(false);
        palindromicJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                palindromicJTextFieldActionPerformed(evt);
            }
        });

        emirpJRadioButton.setBackground(new java.awt.Color(255, 204, 204));
        radioJButtonGroup.add(emirpJRadioButton);
        emirpJRadioButton.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        emirpJRadioButton.setText("How many emipr numbers?");
        emirpJRadioButton.setToolTipText("");
        emirpJRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                emirpJRadioButtonItemStateChanged(evt);
            }
        });
        emirpJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emirpJRadioButtonActionPerformed(evt);
            }
        });

        emirpJTextField.setEditable(false);
        emirpJTextField.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        emirpJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        emirpJTextField.setToolTipText("How many prime numbers do you wish from the first?");
        emirpJTextField.setVerifyInputWhenFocusTarget(false);
        emirpJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emirpJTextFieldActionPerformed(evt);
            }
        });

        sophieGermainJRadioButton.setBackground(new java.awt.Color(255, 204, 204));
        radioJButtonGroup.add(sophieGermainJRadioButton);
        sophieGermainJRadioButton.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        sophieGermainJRadioButton.setText("How many Germain primes?");
        sophieGermainJRadioButton.setToolTipText("<html>A prime p is said to be a Sophie Germain prime if both p and 2p + 1 are prime. <br>The first few Sophie Germain primes are 2, 3, 5, 11, 23, 29, 41, 53, 83, 89, 113, 131, ...</html>");
        sophieGermainJRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sophieGermainJRadioButtonItemStateChanged(evt);
            }
        });
        sophieGermainJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sophieGermainJRadioButtonActionPerformed(evt);
            }
        });

        sophieGermainJTextField.setEditable(false);
        sophieGermainJTextField.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        sophieGermainJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        sophieGermainJTextField.setToolTipText("How many prime numbers do you wish from the first?");
        sophieGermainJTextField.setVerifyInputWhenFocusTarget(false);
        sophieGermainJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sophieGermainJTextFieldActionPerformed(evt);
            }
        });

        safeJRadioButton.setBackground(new java.awt.Color(255, 204, 204));
        radioJButtonGroup.add(safeJRadioButton);
        safeJRadioButton.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        safeJRadioButton.setText("How many safe primes?");
        safeJRadioButton.setToolTipText("<html>A safe prime is a prime number of the form 2p + 1, where p is also a prime.<br> The first few safe primes are 5, 7, 11, 23, 47, 59, 83, 107, 167, 179, 227, 263, 347, ...</html>");
        safeJRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                safeJRadioButtonItemStateChanged(evt);
            }
        });
        safeJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                safeJRadioButtonActionPerformed(evt);
            }
        });

        safeJTextField.setEditable(false);
        safeJTextField.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        safeJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        safeJTextField.setToolTipText("How many prime numbers do you wish from the first?");
        safeJTextField.setVerifyInputWhenFocusTarget(false);
        safeJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                safeJTextFieldActionPerformed(evt);
            }
        });

        fermatJRadioButton.setBackground(new java.awt.Color(255, 204, 204));
        radioJButtonGroup.add(fermatJRadioButton);
        fermatJRadioButton.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        fermatJRadioButton.setText("How many Fermat number?");
        fermatJRadioButton.setToolTipText("<html>A safe prime is a prime number of the form 2p + 1, where p is also a prime.<br> The first few safe primes are 5, 7, 11, 23, 47, 59, 83, 107, 167, 179, 227, 263, 347, ...</html>");
        fermatJRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fermatJRadioButtonItemStateChanged(evt);
            }
        });
        fermatJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fermatJRadioButtonActionPerformed(evt);
            }
        });

        fermatJTextField.setEditable(false);
        fermatJTextField.setFont(new java.awt.Font("MS Sans Serif", 0, 12)); // NOI18N
        fermatJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        fermatJTextField.setToolTipText("How many Fermat numbers do you wish from the first?");
        fermatJTextField.setVerifyInputWhenFocusTarget(false);
        fermatJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fermatJTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout choiceJPanelLayout = new javax.swing.GroupLayout(choiceJPanel);
        choiceJPanel.setLayout(choiceJPanelLayout);
        choiceJPanelLayout.setHorizontalGroup(
            choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(choiceJPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(choiceJPanelLayout.createSequentialGroup()
                        .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(listAllJRadioButton)
                            .addComponent(isPrimeJRadioButton)
                            .addComponent(factorizationJRadioButton))
                        .addGap(22, 22, 22)
                        .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(isPrimeJTextField)
                            .addComponent(factorizationJTextField)
                            .addComponent(listAllJTextField)))
                    .addGroup(choiceJPanelLayout.createSequentialGroup()
                        .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(choiceJPanelLayout.createSequentialGroup()
                                .addComponent(goldbachJRadioButton)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(choiceJPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(fromJLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lowJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(toJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(highJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(goldbachJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(choiceJPanelLayout.createSequentialGroup()
                        .addComponent(emirpJRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(emirpJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(choiceJPanelLayout.createSequentialGroup()
                        .addComponent(palindromicJRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(palindromicJTextField))
                    .addGroup(choiceJPanelLayout.createSequentialGroup()
                        .addComponent(rangeJRadioButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(choiceJPanelLayout.createSequentialGroup()
                        .addComponent(fermatJRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fermatJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(choiceJPanelLayout.createSequentialGroup()
                        .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(safeJRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sophieGermainJRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sophieGermainJTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(safeJTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        choiceJPanelLayout.setVerticalGroup(
            choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(choiceJPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listAllJRadioButton)
                    .addComponent(listAllJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(choiceJPanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(isPrimeJRadioButton))
                    .addGroup(choiceJPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(isPrimeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5)
                .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(factorizationJRadioButton)
                    .addComponent(factorizationJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(rangeJRadioButton)
                .addGap(4, 4, 4)
                .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(highJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lowJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(goldbachJRadioButton)
                    .addComponent(goldbachJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(palindromicJRadioButton)
                    .addComponent(palindromicJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emirpJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emirpJRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sophieGermainJRadioButton)
                    .addComponent(sophieGermainJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(safeJRadioButton)
                    .addComponent(safeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(choiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fermatJRadioButton)
                    .addComponent(fermatJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(choiceJPanel, java.awt.BorderLayout.WEST);

        displayJPanel.setBackground(new java.awt.Color(255, 204, 204));
        displayJPanel.setPreferredSize(new java.awt.Dimension(320, 180));

        displayTextArea.setEditable(false);
        displayTextArea.setFont(new java.awt.Font("MonoSpaced", 1, 12)); // NOI18N
        displayTextArea.setLineWrap(true);
        displayTextArea.setWrapStyleWord(true);
        displayJScrollPanel.setViewportView(displayTextArea);

        javax.swing.GroupLayout displayJPanelLayout = new javax.swing.GroupLayout(displayJPanel);
        displayJPanel.setLayout(displayJPanelLayout);
        displayJPanelLayout.setHorizontalGroup(
            displayJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayJPanelLayout.createSequentialGroup()
                .addComponent(displayJScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 18, Short.MAX_VALUE))
        );
        displayJPanelLayout.setVerticalGroup(
            displayJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(displayJScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(displayJPanel, java.awt.BorderLayout.CENTER);

        controlPanel.setBackground(new java.awt.Color(255, 204, 204));
        controlPanel.setPreferredSize(new java.awt.Dimension(380, 50));
        controlPanel.setLayout(new java.awt.GridLayout(1, 4));

        calculateJButton.setBackground(new java.awt.Color(255, 255, 204));
        calculateJButton.setFont(new java.awt.Font("MS Sans Serif", 0, 14)); // NOI18N
        calculateJButton.setMnemonic('C');
        calculateJButton.setText("Calculate");
        calculateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateJButtonActionPerformed(evt);
            }
        });
        controlPanel.add(calculateJButton);

        clearJButton.setBackground(new java.awt.Color(255, 255, 204));
        clearJButton.setFont(new java.awt.Font("MS Sans Serif", 0, 14)); // NOI18N
        clearJButton.setMnemonic('l');
        clearJButton.setText("Clear");
        clearJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearJButtonActionPerformed(evt);
            }
        });
        controlPanel.add(clearJButton);

        printJButton.setBackground(new java.awt.Color(255, 255, 204));
        printJButton.setFont(new java.awt.Font("MS Sans Serif", 0, 14)); // NOI18N
        printJButton.setMnemonic('P');
        printJButton.setText("Print");
        printJButton.setToolTipText("Print content of JTExtField");
        printJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printJButtonActionPerformed(evt);
            }
        });
        controlPanel.add(printJButton);

        quitJButton.setBackground(new java.awt.Color(255, 255, 204));
        quitJButton.setFont(new java.awt.Font("MS Sans Serif", 0, 14)); // NOI18N
        quitJButton.setMnemonic('Q');
        quitJButton.setText("Quit");
        quitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitJButtonActionPerformed(evt);
            }
        });
        controlPanel.add(quitJButton);

        getContentPane().add(controlPanel, java.awt.BorderLayout.SOUTH);

        fileJMenu.setMnemonic('F');
        fileJMenu.setText("File");

        clearJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        clearJMenuItem.setMnemonic('C');
        clearJMenuItem.setText("Clear");
        clearJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(clearJMenuItem);

        printJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        printJMenuItem.setMnemonic('P');
        printJMenuItem.setText("Print Form");
        printJMenuItem.setToolTipText("Print Form a sGUI");
        printJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(printJMenuItem);

        exitJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        exitJMenuItem.setMnemonic('x');
        exitJMenuItem.setText("Exit");
        exitJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(exitJMenuItem);

        primesJMenuBar.add(fileJMenu);

        actionJMenu.setMnemonic('A');
        actionJMenu.setText("Action");

        menuJButtonGroup.add(listPrimesJRadioButtonMenuItem);
        listPrimesJRadioButtonMenuItem.setMnemonic('L');
        listPrimesJRadioButtonMenuItem.setSelected(true);
        listPrimesJRadioButtonMenuItem.setText("List Primes");
        listPrimesJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listPrimesJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(listPrimesJRadioButtonMenuItem);

        menuJButtonGroup.add(testForPrimeJRadioButtonMenuItem);
        testForPrimeJRadioButtonMenuItem.setMnemonic('T');
        testForPrimeJRadioButtonMenuItem.setText("Test for Prime");
        testForPrimeJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testForPrimeJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(testForPrimeJRadioButtonMenuItem);

        menuJButtonGroup.add(primeFactorizationJRadioButtonMenuItem);
        primeFactorizationJRadioButtonMenuItem.setMnemonic('F');
        primeFactorizationJRadioButtonMenuItem.setText("Primes Factorization");
        primeFactorizationJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                primeFactorizationJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(primeFactorizationJRadioButtonMenuItem);

        menuJButtonGroup.add(rangeOfPrimesJRadioButtonMenuItem);
        rangeOfPrimesJRadioButtonMenuItem.setMnemonic('R');
        rangeOfPrimesJRadioButtonMenuItem.setText("Range of Primes");
        rangeOfPrimesJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rangeOfPrimesJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(rangeOfPrimesJRadioButtonMenuItem);

        menuJButtonGroup.add(goldbachJRadioButtonMenuItem);
        goldbachJRadioButtonMenuItem.setMnemonic('R');
        goldbachJRadioButtonMenuItem.setText("Goldbach's conjecture");
        goldbachJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goldbachJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(goldbachJRadioButtonMenuItem);

        menuJButtonGroup.add(palindromicJRadioButtonMenuItem);
        palindromicJRadioButtonMenuItem.setMnemonic('m');
        palindromicJRadioButtonMenuItem.setText("Palindromic Primes");
        palindromicJRadioButtonMenuItem.setToolTipText("List specified number of palindromic primes");
        palindromicJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                palindromicJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(palindromicJRadioButtonMenuItem);

        menuJButtonGroup.add(emirpJRadioButtonMenuItem);
        emirpJRadioButtonMenuItem.setMnemonic('R');
        emirpJRadioButtonMenuItem.setText("List emirp");
        emirpJRadioButtonMenuItem.setToolTipText("List specified number of emirp = palindromic prime numbers");
        emirpJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emirpJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(emirpJRadioButtonMenuItem);

        menuJButtonGroup.add(sophieGermainJRadioButtonMenuItem);
        sophieGermainJRadioButtonMenuItem.setMnemonic('R');
        sophieGermainJRadioButtonMenuItem.setText("Sophie Germain Primes");
        sophieGermainJRadioButtonMenuItem.setToolTipText("List specified number of emirp = nonpalindromic prime number whose reversal is also a prime");
        sophieGermainJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sophieGermainJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(sophieGermainJRadioButtonMenuItem);

        menuJButtonGroup.add(safeJRadioButtonMenuItem);
        safeJRadioButtonMenuItem.setText("Safe Primes");
        safeJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                safeJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(safeJRadioButtonMenuItem);

        menuJButtonGroup.add(fermatJRadioButtonMenuItem);
        fermatJRadioButtonMenuItem.setLabel("Fermat Number");
        fermatJRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fermatJRadioButtonMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(fermatJRadioButtonMenuItem);

        primesJMenuBar.add(actionJMenu);

        helpJMenu.setMnemonic('H');
        helpJMenu.setText("Help");

        aboutrJMenuItem.setMnemonic('A');
        aboutrJMenuItem.setText("About");
        aboutrJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutrJMenuItemActionPerformed(evt);
            }
        });
        helpJMenu.add(aboutrJMenuItem);

        primesJMenuBar.add(helpJMenu);

        setJMenuBar(primesJMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       clearJMenuItemActionPerformed
     * Description  Method to clear all and reset form. Calls
     *              clearJButtonActionPerformed event handler.
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void clearJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearJMenuItemActionPerformed
    {//GEN-HEADEREND:event_clearJMenuItemActionPerformed
        clearJButtonActionPerformed(evt);
    }//GEN-LAST:event_clearJMenuItemActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       printJMenuItemActionPerformed
     * Description  Method to print form as GUI. Calls PrintUtilities's
     *              printComponent method.
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void printJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_printJMenuItemActionPerformed
    {//GEN-HEADEREND:event_printJMenuItemActionPerformed
        //http://www.apl.jhu.edu/~hall/java/Swing-Tutorial/Swing-Tutorial-Printing.html
        PrintUtilities.printComponent(this);
    }//GEN-LAST:event_printJMenuItemActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       exitJMenuItemActionPerformed
     * Description  End the application.
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void exitJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exitJMenuItemActionPerformed
    {//GEN-HEADEREND:event_exitJMenuItemActionPerformed
        quitJButtonActionPerformed(evt);
    }//GEN-LAST:event_exitJMenuItemActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       listPrimesJRadioButtonMenuItemActionPerformed
     * Description  Select the list all primes radio button.
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void listPrimesJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_listPrimesJRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_listPrimesJRadioButtonMenuItemActionPerformed
        isPrimeJRadioButton.setSelected(true);
    }//GEN-LAST:event_listPrimesJRadioButtonMenuItemActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       testForPrimeJRadioButtonMenuItemActionPerformed
     * Description  Select the test for prime radio button.
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void testForPrimeJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_testForPrimeJRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_testForPrimeJRadioButtonMenuItemActionPerformed
        isPrimeJRadioButton.setSelected(true);
    }//GEN-LAST:event_testForPrimeJRadioButtonMenuItemActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       primeFactorizationJRadioButtonMenuItemActionPerformed
     * Description  Select the prime factorization radio button.
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void primeFactorizationJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_primeFactorizationJRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_primeFactorizationJRadioButtonMenuItemActionPerformed
        factorizationJRadioButton.setSelected(true);
    }//GEN-LAST:event_primeFactorizationJRadioButtonMenuItemActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       rangeOfPrimesJRadioButtonMenuItemActionPerformed
     * Description  Select range of primes radio button.
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void rangeOfPrimesJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rangeOfPrimesJRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_rangeOfPrimesJRadioButtonMenuItemActionPerformed
        rangeJRadioButton.setSelected(true);
    }//GEN-LAST:event_rangeOfPrimesJRadioButtonMenuItemActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       goldbachJRadioButtonMenuItemActionPerformed
     * Description  Select goldbach radio button.
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void goldbachJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_goldbachJRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_goldbachJRadioButtonMenuItemActionPerformed
        goldbachJRadioButton.setSelected(true);
    }//GEN-LAST:event_goldbachJRadioButtonMenuItemActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       emirpJRadioButtonMenuItemActionPerformed
     * Description  Select emirp radio button.
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void emirpJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_emirpJRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_emirpJRadioButtonMenuItemActionPerformed
        emirpJRadioButton.setSelected(true);
    }//GEN-LAST:event_emirpJRadioButtonMenuItemActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       aboutrJMenuItemActionPerformed
     * Description  Create and show About form.
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void aboutrJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutrJMenuItemActionPerformed
    {//GEN-HEADEREND:event_aboutrJMenuItemActionPerformed
        About myAbout = new About(this, true);
        myAbout.setVisible(true);
    }//GEN-LAST:event_aboutrJMenuItemActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       calculateJButtonActionPerformed
     * Description  Method to select appropriate method for prime operation.
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void calculateJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_calculateJButtonActionPerformed
    {//GEN-HEADEREND:event_calculateJButtonActionPerformed
        // Find primes for each selection
        displayTextArea.setText("");    // clear display area
        int whichButton = getButton();  // decide which radio button is selected
        switch (whichButton) {
            case 1: // display the first n prime numbers
            {
                listPrimes();
                break;
            }

            case 2: // yields yes or no on prime for a given number
            {
                testPrimes();
                break;
            }
            case 3: // prime factorization
            {
                primeFactorization();
                break;
            }

            case 4: // range of prime numbers
            {
                rangePrimes();
                break;
            }
            case 5: // Goldbach's conjecture
            {
                goldbachPrimes();
                break;
            }
            case 6: // palindromic primes--reversal is a prime
            {
                palindromicPrimes();
                break;
            }
            case 7: // emirp primes--nonpalindromic reversal is a prime
            {
                emirpPrimes();
                break;
            }
            case 8: // Sophie Germain primes
            {
                sophiePrimes();
                break;
            }
            case 9: // safe primea--primes of the form 2p + 1
            {
                safePrimes();
                break;
            }
            case 10: // Fermat number-- F=2^(2^n) + 1
            {
                fermatNumber();
                break;
            }
        } //end switch
    }//GEN-LAST:event_calculateJButtonActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       listPrimes--case 1.
     * Description  Method to list user selected number of primes.
     * Date         5/18/2021
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void listPrimes() {
        try {
            int max = Integer.parseInt(listAllJTextField.getText());

            if (max < 1 || max > MAX_INPUT) {
                throw new NumberFormatException();
            }

            // allocate array for primes
            int[] primes = new int[max];
            primes[0] = 2;
            int count = 1;
            int trialNumber = 1;
            boolean isAPrime = false;
            StringBuilder strOutput = new StringBuilder("");

            while (count < max) {
                trialNumber += 2;
                isAPrime = isPrime(trialNumber);

                if (isAPrime) {
                    primes[count] = trialNumber;
                    count++;
                }
            }

            if (count == 1) {
                strOutput.append("The first prime number is \n\n");
            } else {
                strOutput.append("The first " + max + " prime numbers are: \n\n");
            }

            for (int i = 0; i < max; i++) {
                strOutput.append(primes[i] + "\t");

                if ((i + 1) % 5 == 0) {
                    strOutput.append("\n");
                }
                displayTextArea.setText(strOutput.toString());
                displayTextArea.setCaretPosition(0);
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(
                    null,
                    "Please enter a positive integer in range[1, " + MAX_INPUT + "]",
                    "Invalid Input",
                    JOptionPane.WARNING_MESSAGE
            );
            listAllJTextField.requestFocus();
            listAllJTextField.selectAll();
        }
    }

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       testPrimes() - case 2
     * Description  Method to test if a give number is a prime.
     * Date         5/18/2021
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void testPrimes() {
        try {
            int input = Integer.parseInt(isPrimeJTextField.getText());
            if (input < 2 || input > MAX_INPUT) {
                throw new NumberFormatException();
            }

            if (isPrime(input)) {
                displayTextArea.setText(input + " is a prime number.");
            } else {
                displayTextArea.setText(input + " is not a prime number.");
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(
                    null,
                    "Please enter a positive integer in range[2, " + MAX_INPUT + "]",
                    "Invalid Input",
                    JOptionPane.WARNING_MESSAGE
            );
            isPrimeJTextField.requestFocus();
            isPrimeJTextField.selectAll();
        }
    }

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       primeFactorization--case 3.
     * Description  Method to factor a composite number into product of primes.
     * Date         5/18/2021
     * @return      true/false boolean
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void primeFactorization() {
        try {
            int trialNumber = Integer.parseInt(factorizationJTextField.getText());

            if (trialNumber < 2 || trialNumber > MAX_INPUT) {
                throw new NumberFormatException();
            }

            // check if it is a prime
            boolean isItAPrime = isPrime(trialNumber);
            StringBuilder strOutput = new StringBuilder(trialNumber + " = ");

            int factor = 2;
            if (isItAPrime) {
                displayTextArea.setText(trialNumber + " is a prime number:");
            } else {
                while (trialNumber > 1) {
                    if (trialNumber % factor == 0) {
                        strOutput.append(factor).append("*");
                        trialNumber /= factor;
                    } else {
                        factor++;
                    }
                }

                strOutput.deleteCharAt(strOutput.length() - 1);
                displayTextArea.setText(strOutput.toString());
                displayTextArea.setCaretPosition(0);
            } // end else
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(
                    null,
                    "Please enter a positive integer in range[2, " + MAX_INPUT + "]",
                    "Invalid Input",
                    JOptionPane.WARNING_MESSAGE
            );
            factorizationJTextField.requestFocus();
            factorizationJTextField.selectAll();
        }

    }

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       rangePrimes--case 4.
     * Description  Method to list primes in specified range.
     * Date         5/18/2021
     * @return      true/false boolean
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void rangePrimes() {

        try {
            int min = Integer.parseInt(lowJTextField.getText());

            if (min <2 || min > MAX_INPUT) {
                throw new NumberFormatException();
            }

            try {
                int max = Integer.parseInt(highJTextField.getText());

                if (max < min || max > MAX_INPUT) {
                    throw new NumberFormatException();
                }

                int lineCount = 1;
                int trialNumber = min;
                boolean isItAPrime = false;
                String strOutput = "";

                while (trialNumber <= max) {
                    isItAPrime = isPrime(trialNumber);
                    if (isItAPrime) {
                        if (lineCount % 5 == 0) {
                            strOutput += trialNumber + "\n";
                        } else {
                            strOutput += trialNumber + "\t";
                        }
                        lineCount++;
                    }

                    if (trialNumber % 2 == 0) {
                        trialNumber++;
                    } else {
                        trialNumber += 2;
                    }

                    if (lineCount + 1 > 2) {
                        displayTextArea.setText("There are " + (lineCount - 1) + " prime numbers \nbetween " + min + " and " + max + ".\n\n" + strOutput);
                    } else {
                        displayTextArea.setText("There is " + (lineCount - 1) + " prime number \nbetween " + min + " and " + max + ".\n\n" + strOutput);
                    }
                    displayTextArea.setCaretPosition(0);
                } // end while

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(
                        null,
                        "Please enter a positive integer in range[" + min + ", " + MAX_INPUT + "]",
                        "Invalid Input",
                        JOptionPane.WARNING_MESSAGE
                );
                highJTextField.requestFocus();
                highJTextField.selectAll();
            }
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(
                    null,
                    "Please enter a positive integer in range[2, " + MAX_INPUT + "]",
                    "Invalid Input",
                    JOptionPane.WARNING_MESSAGE
            );
            lowJTextField.requestFocus();
            lowJTextField.selectAll();
        }

    }

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       goldbachPrimes--case 5.
     * Description  Method to list distinct combinations of two primes whose
     *              sum is the an even trial number.
     *
     *              Golbach’s conjecture.
     *              Every even integer greater than 2 can be expressed as the sum
     *              of two primes.
     * Date         5/18/2021
     * @return      true/false boolean
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void goldbachPrimes() {
        try {
            int trialNumber = Integer.parseInt(goldbachJTextField.getText());

            if (trialNumber < 4 || trialNumber > MAX_INPUT || trialNumber % 2 == 1) {
                throw new NumberFormatException();
            }

            StringBuilder output = new StringBuilder("The combinations of prime numbers\n"
                    + "whose sum is " + trialNumber + " are:\n\n");

            for (int i = 2; i <= trialNumber / 2; i++) {
                int j = trialNumber - i;
                if (isPrime(i) && isPrime(j)) {
                    output.append(trialNumber).append(" = ").append(i).append(" + ").append(j).append("\n");
                }
            }

            displayTextArea.setText(output.toString());
            displayTextArea.setCaretPosition(0);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(
                    null,
                    "Please enter a positive even integer in range [4, " + MAX_INPUT + "]",
                    "Invalid Input",
                    JOptionPane.WARNING_MESSAGE
            );
            goldbachJTextField.requestFocus();
            goldbachJTextField.selectAll();
        }
    }// end if

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       palindromicPrime--case 6.
     * Description  Method to list specified number of palindromic primes. A
     *              palindromic prime is a prime number whoe reverse is also
     *              a prime.
     * Date         5/18/2021
     * @return      true/false boolean
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void palindromicPrimes() {
        try {
            int max = Integer.parseInt(palindromicJTextField.getText());
            if (max < 1 || max > MAX_INPUT) {
                throw new NumberFormatException();
            }

            StringBuilder output = new StringBuilder("The first " + max
                    + " palindromic prime number whose reverses are primes are:\n\n");

            int count = 0;
            for (int i = 2; count < max; i++) {
                if (isPrime(i) && isPalindrome(i)) {
                    output.append(i + "\t");

                    if ((count + 1) % 5 == 0) {
                        output.append("\n");
                    }

                    count++;
                }
            }

            displayTextArea.setText(output.toString());
            displayTextArea.setCaretPosition(0);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(
                    null,
                    "Please enter a positive even integer in range [2, " + MAX_INPUT + "]",
                    "Invalid Input",
                    JOptionPane.WARNING_MESSAGE
            );
            palindromicJTextField.requestFocus();
            palindromicJTextField.selectAll();
        }
    }

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       emirpPrimes--case 7.
     * Description  Method to list specified number of emirps. An emirp is a
     *              nonpalindromic prime whose reverse is also a prime.
     * Date         5/18/2021
     * @return      true/false boolean
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void emirpPrimes() {
        try {
            int max = Integer.parseInt(emirpJTextField.getText());
            if (max < 1 || max > MAX_INPUT) {
                throw new NumberFormatException();
            }

            StringBuilder output = new StringBuilder("The first " + max
                    + " emirps = a nonpalindromic \nprime numbers whose reverses are primes:\n\n");

            int count = 0;
            for (int i = 13; count < max; i++) {
                if (isPrime(i) && !isPalindrome(i) && isPrime(reverse(i))) {
                    output.append(i + "\t");
                    if ((count + 1) % 5 == 0) {
                        output.append("\n");
                    }

                    count++;
                }
            }

            displayTextArea.setText(output.toString());
            displayTextArea.setCaretPosition(0);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(
                    null,
                    "Please enter a positive even integer in range [2, " + MAX_INPUT + "]",
                    "Invalid Input",
                    JOptionPane.WARNING_MESSAGE
            );
            emirpJTextField.requestFocus();
            emirpJTextField.selectAll();
        }
    }

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       sophiePrimes--case 8.
     * Description  Method to find Sophie primes--In number theory, a prime
     *              number p is a Sophie Germain prime if 2p + 1 is also prime.
     * Date         5/18/2021
     * @return      true/false boolean
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void sophiePrimes() {
        try {
            int max = Integer.parseInt(sophieGermainJTextField.getText());
            if (max < 1 || max > MAX_INPUT) {
                throw new NumberFormatException();
            }

            StringBuilder output = new StringBuilder("The first " + max
                    + " Sophie Germain primes\n= a prime 2p +1 is also prime are:\n\n");

            int count = 0;
            for (int i = 2; count < max; i++) {
                if (isPrime(i) && isPrime(2 * i + 1)) {
                    output.append(i).append("\t");
                    if ((count + 1) % 5 == 0) {
                        output.append("\n");
                    }

                    count++;
                }
            }

            displayTextArea.setText(output.toString());
            displayTextArea.setCaretPosition(0);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(
                    null,
                    "Please enter a positive even integer in range [2, " + MAX_INPUT + "]",
                    "Invalid Input",
                    JOptionPane.WARNING_MESSAGE
            );
            sophieGermainJTextField.requestFocus();
            sophieGermainJTextField.selectAll();
        }
    }

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       safePrimes--case 9.
     * Description  Method to find safe primes--In number theory, a prime
     *              number p is a safe if it is of the form 2p + 1 where p
     *              also prime.
     * Date         5/18/2021
     * @return      true/false boolean
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void safePrimes() {
        try {
            int max = Integer.parseInt(safeJTextField.getText());
            if (max < 1 || max > MAX_INPUT) {
                throw new NumberFormatException();
            }

            StringBuilder output = new StringBuilder("The first " + max
                    + " safe primes\n= a prime that is of the form 2p +1 are:\n\n");

            int count = 0;
            for (int i = 2; count < max; i++) {

                if (isPrime(i) && isPrime(2 * i + 1)) {
                    output.append((2 * i + 1)).append("\t");
                    if ((count + 1) % 5 == 0) {
                        output.append("\n");
                    }

                    count++;
                }
            }

            displayTextArea.setText(output.toString());
            displayTextArea.setCaretPosition(0);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(
                    null,
                    "Please enter a positive even integer in range [2, " + MAX_INPUT + "]",
                    "Invalid Input",
                    JOptionPane.WARNING_MESSAGE
            );
            safeJTextField.requestFocus();
            safeJTextField.selectAll();
        }
    }

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       fermatNumber--case 10.
     * Description  Method to find Fermat number -- a Fermat number, named after
     *              Pierre de Fermat who first studied them, is a positive integer
     *              of the form. F = 2^(2^n) + 1
     * Date         5/18/2021
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void fermatNumber() {
        try {
            int max = Integer.parseInt(fermatJTextField.getText());
            if (max < 1 || max > 6) {
                throw new NumberFormatException();
            }

            StringBuilder output = new StringBuilder("The first " + max
                    + " Fermat numbers are:\n\n");

            int count = 0;
            for (int i = 0; count < max; i++) {
                long num = (long) (Math.pow(2, Math.pow(2, i)) + 1);
                output.append(num).append("\t");
                if ((count + 1) % 5 == 0) {
                    output.append("\n");
                }

                count++;
            }

            displayTextArea.setText(output.toString());
            displayTextArea.setCaretPosition(0);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(
                    null,
                    "Please enter a positive even integer in range [1, 6]",
                    "Invalid Input",
                    JOptionPane.WARNING_MESSAGE
            );
            fermatJTextField.requestFocus();
            fermatJTextField.selectAll();
        }
    }

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       isPrime
     * Description  Method to determine is given parameter is a prime number.
     * Date         5/18/2021
     * @return      true/false boolean
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private boolean isPrime(long number) {
        if (number == 2) {
            return true;
        } else if (number % 2 == 0) {
            return false;
        } else {
            // check for odd factors only up to square root of the number
            double root = Math.sqrt(number);

            for (int i = 3; i <= root; i += 2) {
                if (number % i == 0) {
                    return false;
                }
            }

            return true;
        }

    }	// end isPrime

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       isPalindrome
     * Description  Method to determine is given number is a palindrome.
     * Date         5/18/2021
     * @param number-int
     * @return true/false boolean
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    public boolean isPalindrome(int number) {

        return number == this.reverse(number);
    }

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       reverse
     * Description  Method to return the reverse of a number.
     * Date         5/18/2021
     * @return      reverse int
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private int reverse(int number) {
        int result = 0;

        while (number != 0) {
            int lastDigit = number % 10;
            result = result * 10 + lastDigit;
            number = number / 10;
        }

        return result;
    }

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       getButton
     * Description  Method to select which primes operation to perform.
     *              try/catch purposely omitted to demonstrate error
     *              propegation
     * Date         5/18/2021
     * @return      which int
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private int getButton() {
        if (listAllJRadioButton.isSelected()) {
            return 1;			// first radio button selected
        } else if (isPrimeJRadioButton.isSelected()) {
            return 2;		// second radio button selected
        } else if (factorizationJRadioButton.isSelected()) {
            return 3;	// third radio button selected
        } else if (rangeJRadioButton.isSelected()) {
            return 4;	// fourth radio button selected
        } else if (goldbachJRadioButton.isSelected()) {
            return 5;
        } else if (palindromicJRadioButton.isSelected()) {
            return 6;
        } else if (emirpJRadioButton.isSelected()) {
            return 7;
        } else if (sophieGermainJRadioButton.isSelected()) {
            return 8;
        } else if (safeJRadioButton.isSelected()) {
            return 9;
        } else {
            return 10;
        }
    }

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       clearJButtonActionPerformed()
     * Description  Event handler to clear and resert form
     * @param       evt ActionEvent
     * @see java.awt.event.ActionEvent
     * @author      <i>Robert Tang</i>
     * Date 5/18/2021 
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void clearJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearJButtonActionPerformed
    {//GEN-HEADEREND:event_clearJButtonActionPerformed
        // Clear all, set focus on listAllJRadioButton
        listAllJRadioButton.setSelected(true);
        displayTextArea.setText("");
        listAllJTextField.setText("");
        listAllJTextField.requestFocus();
        listPrimesJRadioButtonMenuItem.setSelected(true);
    }//GEN-LAST:event_clearJButtonActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       printJButtonActionPerformed()
     * Description  Print inforamation displayed in JTextArea.
     * Date         5/18/2021
     * @param       evt java.awt.event.ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void printJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_printJButtonActionPerformed
    {//GEN-HEADEREND:event_printJButtonActionPerformed
        try {
            displayTextArea.print();
        } catch (PrinterException ex) {
            JOptionPane.showMessageDialog(null, "Cannot print",
                    "Printer Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_printJButtonActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       quitJButtonActionPerformed()
     * Description  End application.
     * @param       evt java.awt.event.ActionEvent
     * Date         5/18/2021
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void quitJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_quitJButtonActionPerformed
    {//GEN-HEADEREND:event_quitJButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitJButtonActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       safeJRadioButtonMenuItemActionPerformed
     * Description  Select safe radio button.
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void safeJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_safeJRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_safeJRadioButtonMenuItemActionPerformed
        safeJRadioButton.setSelected(true);
    }//GEN-LAST:event_safeJRadioButtonMenuItemActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       sophieGermainJRadioButtonMenuItemActionPerformed
     * Description  Select safe radio button.
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void sophieGermainJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_sophieGermainJRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_sophieGermainJRadioButtonMenuItemActionPerformed
        sophieGermainJRadioButton.setSelected(true);
    }//GEN-LAST:event_sophieGermainJRadioButtonMenuItemActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       palindromicJTextFieldActionPerformed
     * Description  Event handler to call calculateJButtonActionPerformed
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void palindromicJTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_palindromicJTextFieldActionPerformed
    {//GEN-HEADEREND:event_palindromicJTextFieldActionPerformed
        calculateJButtonActionPerformed(evt);
    }//GEN-LAST:event_palindromicJTextFieldActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       palindromicJRadioButtonActionPerformed
     * Description  Select palindromic radio button.
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void palindromicJRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_palindromicJRadioButtonActionPerformed
    {//GEN-HEADEREND:event_palindromicJRadioButtonActionPerformed
        palindromicJRadioButtonMenuItem.setSelected(true);
    }//GEN-LAST:event_palindromicJRadioButtonActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       palindromicJRadioButtonItemStateChanged
     * Description  ItemEvent handler to set editable or not corresponding
     *              JTextField.
     * Date         5/18/2021
     * @param       evt ItemEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void palindromicJRadioButtonItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_palindromicJRadioButtonItemStateChanged
    {//GEN-HEADEREND:event_palindromicJRadioButtonItemStateChanged
        // Enable corresponding text field
        if (palindromicJRadioButton.isSelected()) {
            whichRadio = 6;
            palindromicJTextField.setEditable(true);
            palindromicJTextField.requestFocus();
        } else {
            palindromicJTextField.setText("");
            palindromicJTextField.setEditable(false);
            displayTextArea.setText("");
        }
    }//GEN-LAST:event_palindromicJRadioButtonItemStateChanged
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       safeJTextFieldActionPerformed
     * Description  Event handler to call calculateJButtonActionPerformed
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void safeJTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_safeJTextFieldActionPerformed
    {//GEN-HEADEREND:event_safeJTextFieldActionPerformed
        calculateJButtonActionPerformed(evt);
    }//GEN-LAST:event_safeJTextFieldActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       sophieGermainJTextFieldActionPerformed
     * Description  Event handler to call calculateJButtonActionPerformed
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void sophieGermainJTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_sophieGermainJTextFieldActionPerformed
    {//GEN-HEADEREND:event_sophieGermainJTextFieldActionPerformed
        calculateJButtonActionPerformed(evt);
    }//GEN-LAST:event_sophieGermainJTextFieldActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       safeJRadioButtonActionPerformed
     * Description  Select safe radio button.
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void safeJRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_safeJRadioButtonActionPerformed
    {//GEN-HEADEREND:event_safeJRadioButtonActionPerformed
        // Select the corresponding menu choice
        /*
        A safe prime is a prime number of the form 2p + 1, where p is also a
        prime. (Conversely, the prime p is a Sophie Germain prime.) The first
        few safe primes are:
        5, 7, 11, 23, 47, 59, 83, 107, 167, 179, 227, 263, 347, 359, 383, ...
         */
        safeJRadioButtonMenuItem.setSelected(true);
    }//GEN-LAST:event_safeJRadioButtonActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       safeJRadioButtonItemStateChanged
     * Description  ItemEvent handler to set editable or not corresponding
     *              JTextField.
     * Date         5/18/2021
     * @param       evt ItemEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void safeJRadioButtonItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_safeJRadioButtonItemStateChanged
    {//GEN-HEADEREND:event_safeJRadioButtonItemStateChanged
        // Enable corresponding text field
        if (safeJRadioButton.isSelected()) {
            whichRadio = 9;
            safeJTextField.setEditable(true);
            safeJTextField.requestFocus();
        } else {
            safeJTextField.setText("");
            safeJTextField.setEditable(false);
            displayTextArea.setText("");
        }
    }//GEN-LAST:event_safeJRadioButtonItemStateChanged
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       sophieGermainJRadioButtonActionPerformed
     * Description  Select sophieGermain radio button.
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void sophieGermainJRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_sophieGermainJRadioButtonActionPerformed
    {//GEN-HEADEREND:event_sophieGermainJRadioButtonActionPerformed
        // Select the corresponding menu choice
        /*
        In number theory, a prime number p is a Sophie Germain prime if 2p + 1
        is also prime. The number 2p + 1 associated with a Sophie Germain prime
        is called a safe prime. For example, 11 is a Sophie Germain prime and
        2 × 11 + 1 = 23 is its associated safe prime. Sophie Germain primes are
        named after French mathematician Sophie Germain, who used them in her
        investigations of Fermat's Last Theorem.[1] Sophie Germain primes and
        safe primes have applications in public key cryptography and primality
        testing. It has been conjectured that there are infinitely many Sophie
        Germain primes, but this remains unproven.
        The first few Sophie Germain primes are:
        2, 3, 5, 11, 23, 29, 41, 53, 83, 89, 113, 131, 173, 179, 191, 233, ...
         */
        sophieGermainJRadioButtonMenuItem.setSelected(true);
    }//GEN-LAST:event_sophieGermainJRadioButtonActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       sophieGermainJRadioButtonItemStateChanged
     * Description  ItemEvent handler to set editable or not corresponding
     *              JTextField.
     * Date         5/18/2021
     * @param       evt ItemEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void sophieGermainJRadioButtonItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_sophieGermainJRadioButtonItemStateChanged
    {//GEN-HEADEREND:event_sophieGermainJRadioButtonItemStateChanged
        // Enable corresponding text field
        if (sophieGermainJRadioButton.isSelected()) {
            whichRadio = 8;
            sophieGermainJTextField.setEditable(true);
            sophieGermainJTextField.requestFocus();
        } else {
            sophieGermainJTextField.setText("");
            sophieGermainJTextField.setEditable(false);
            displayTextArea.setText("");
        }
    }//GEN-LAST:event_sophieGermainJRadioButtonItemStateChanged
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       emirpJTextFieldActionPerformed
     * Description  Calls the calculateJButton event handler to recalculate.
     * Date         5/18/2021
     * @param       evt ItemEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void emirpJTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_emirpJTextFieldActionPerformed
    {//GEN-HEADEREND:event_emirpJTextFieldActionPerformed
        calculateJButtonActionPerformed(evt);
    }//GEN-LAST:event_emirpJTextFieldActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       emirpJRadioButtonActionPerformed
     * Description  Select emirp radio button.
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void emirpJRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_emirpJRadioButtonActionPerformed
    {//GEN-HEADEREND:event_emirpJRadioButtonActionPerformed
        emirpJRadioButtonMenuItem.setSelected(true);
    }//GEN-LAST:event_emirpJRadioButtonActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       emirpJRadioButtonItemStateChanged
     * Description  ItemEvent handler to set editable or not corresponding
     *              JTextField.
     * Date         5/18/2021
     * @param       evt ItemEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void emirpJRadioButtonItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_emirpJRadioButtonItemStateChanged
    {//GEN-HEADEREND:event_emirpJRadioButtonItemStateChanged
        if (emirpJRadioButton.isSelected()) {
            whichRadio = 6;
            emirpJTextField.setEditable(true);
            emirpJTextField.requestFocus();
        } else {
            emirpJTextField.setText("");
            emirpJTextField.setEditable(false);
            displayTextArea.setText("");
        }
    }//GEN-LAST:event_emirpJRadioButtonItemStateChanged
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       goldbachJTextFieldActionPerformed
     * Description  Calls the calculateJButton event handler to recalculate.
     * Date         5/18/2021
     * @param       evt ItemEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void goldbachJTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_goldbachJTextFieldActionPerformed
    {//GEN-HEADEREND:event_goldbachJTextFieldActionPerformed
        calculateJButtonActionPerformed(evt);
    }//GEN-LAST:event_goldbachJTextFieldActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       goldbachJRadioButtonActionPerformed
     * Description  Select goldbach radio button.
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void goldbachJRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_goldbachJRadioButtonActionPerformed
    {//GEN-HEADEREND:event_goldbachJRadioButtonActionPerformed
        goldbachJRadioButtonMenuItem.setSelected(true);
    }//GEN-LAST:event_goldbachJRadioButtonActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       goldbachJRadioButtonItemStateChanged
     * Description  ItemEvent handler to set editable or not corresponding
     *              JTextField.
     * Date         5/18/2021
     * @param       evt ItemEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void goldbachJRadioButtonItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_goldbachJRadioButtonItemStateChanged
    {//GEN-HEADEREND:event_goldbachJRadioButtonItemStateChanged
        if (goldbachJRadioButton.isSelected()) {
            whichRadio = 5;
            goldbachJTextField.setEditable(true);
            goldbachJTextField.requestFocus();
        } else {
            goldbachJTextField.setText("");
            goldbachJTextField.setEditable(false);
            displayTextArea.setText("");
        }
    }//GEN-LAST:event_goldbachJRadioButtonItemStateChanged
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       highJTextFieldActionPerformed
     * Description  Calls the calculateJButton event handler to recalculate.
     * Date         5/18/2021
     * @param       evt ItemEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void highJTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_highJTextFieldActionPerformed
    {//GEN-HEADEREND:event_highJTextFieldActionPerformed
        calculateJButtonActionPerformed(evt);
    }//GEN-LAST:event_highJTextFieldActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       highJTextFieldActionPerformed
     * Description  Calls the calculateJButton event handler to recalculate.
     * Date         5/18/2021
     * @param       evt ItemEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void lowJTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_lowJTextFieldActionPerformed
    {//GEN-HEADEREND:event_lowJTextFieldActionPerformed
        calculateJButtonActionPerformed(evt);
    }//GEN-LAST:event_lowJTextFieldActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       rangeJRadioButtonActionPerformed
     * Description  Select range radio button.
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void rangeJRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rangeJRadioButtonActionPerformed
    {//GEN-HEADEREND:event_rangeJRadioButtonActionPerformed
        rangeOfPrimesJRadioButtonMenuItem.setSelected(true);
    }//GEN-LAST:event_rangeJRadioButtonActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       rangeJRadioButtonItemStateChanged
     * Description  ItemEvent handler to set editable or not corresponding
     *              JTextField.
     * Date         5/18/2021
     * @param       evt ItemEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void rangeJRadioButtonItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_rangeJRadioButtonItemStateChanged
    {//GEN-HEADEREND:event_rangeJRadioButtonItemStateChanged
        if (rangeJRadioButton.isSelected()) {
            whichRadio = 4;
            lowJTextField.setEditable(true);
            highJTextField.setEditable(true);
            lowJTextField.requestFocus();
        } else {
            lowJTextField.setText("");
            highJTextField.setText("");
            lowJTextField.setEditable(false);
            highJTextField.setEditable(false);
            displayTextArea.setText("");
        }
    }//GEN-LAST:event_rangeJRadioButtonItemStateChanged
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       highJTextFieldActionPerformed
     * Description  Calls the calculateJButton event handler to recalculate.
     * Date         5/18/2021
     * @param       evt ItemEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void factorizationJTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_factorizationJTextFieldActionPerformed
    {//GEN-HEADEREND:event_factorizationJTextFieldActionPerformed
        calculateJButtonActionPerformed(evt);
    }//GEN-LAST:event_factorizationJTextFieldActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       factorizationJRadioButtonActionPerformed
     * Description  Select primeFactorization radio button.
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void factorizationJRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_factorizationJRadioButtonActionPerformed
    {//GEN-HEADEREND:event_factorizationJRadioButtonActionPerformed
        primeFactorizationJRadioButtonMenuItem.setSelected(true);
    }//GEN-LAST:event_factorizationJRadioButtonActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       factorizationJRadioButtonItemStateChanged
     * Description  ItemEvent handler to set editable or not corresponding
     *              JTextField.
     * Date         5/18/2021
     * @param       evt ItemEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void factorizationJRadioButtonItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_factorizationJRadioButtonItemStateChanged
    {//GEN-HEADEREND:event_factorizationJRadioButtonItemStateChanged
        if (factorizationJRadioButton.isSelected()) {
            whichRadio = 3;
            factorizationJTextField.setEditable(true);
            factorizationJTextField.requestFocus();
        } else {
            factorizationJTextField.setText("");
            factorizationJTextField.setEditable(false);
            displayTextArea.setText("");
        }
    }//GEN-LAST:event_factorizationJRadioButtonItemStateChanged
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       highJTextFieldActionPerformed
     * Description  Calls the calculateJButton event handler to recalculate.
     * Date         5/18/2021
     * @param       evt ItemEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void isPrimeJTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_isPrimeJTextFieldActionPerformed
    {//GEN-HEADEREND:event_isPrimeJTextFieldActionPerformed
        calculateJButtonActionPerformed(evt);
    }//GEN-LAST:event_isPrimeJTextFieldActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       isPrimeJRadioButtonActionPerformed
     * Description  Select isPrime radio button.
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void isPrimeJRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_isPrimeJRadioButtonActionPerformed
    {//GEN-HEADEREND:event_isPrimeJRadioButtonActionPerformed
        testForPrimeJRadioButtonMenuItem.setSelected(true);
    }//GEN-LAST:event_isPrimeJRadioButtonActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       isPrimeJRadioButtonItemStateChanged
     * Description  ItemEvent handler to set editable or not corresponding
     *              JTextField.
     * Date         5/18/2021
     * @param       evt ItemEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void isPrimeJRadioButtonItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_isPrimeJRadioButtonItemStateChanged
    {//GEN-HEADEREND:event_isPrimeJRadioButtonItemStateChanged
        if (isPrimeJRadioButton.isSelected()) {
            whichRadio = 2;
            isPrimeJTextField.setEditable(true);
            isPrimeJTextField.requestFocus();
        } else {
            isPrimeJTextField.setText("");
            isPrimeJTextField.setEditable(false);
            displayTextArea.setText("");
        }
    }//GEN-LAST:event_isPrimeJRadioButtonItemStateChanged
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       highJTextFieldActionPerformed
     * Description  Calls the calculateJButton event handler to recalculate.
     * Date         5/18/2021
     * @param       evt ItemEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void listAllJTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_listAllJTextFieldActionPerformed
    {//GEN-HEADEREND:event_listAllJTextFieldActionPerformed
        calculateJButtonActionPerformed(evt);
    }//GEN-LAST:event_listAllJTextFieldActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       listAllJRadioButtonActionPerformed
     * Description  Select listAll radio button.
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void listAllJRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_listAllJRadioButtonActionPerformed
    {//GEN-HEADEREND:event_listAllJRadioButtonActionPerformed
        listPrimesJRadioButtonMenuItem.setSelected(true);
    }//GEN-LAST:event_listAllJRadioButtonActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       listAllJRadioButtonItemStateChanged
     * Description  ItemEvent handler to set editable or not corresponding
     *              JTextField.
     * Date         5/18/2021
     * @param       evt ItemEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void listAllJRadioButtonItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_listAllJRadioButtonItemStateChanged
    {//GEN-HEADEREND:event_listAllJRadioButtonItemStateChanged
        if (listAllJRadioButton.isSelected()) {
            whichRadio = 1;
            listAllJTextField.setEditable(true);
            listAllJTextField.requestFocus();
        } else {
            listAllJTextField.setText("");
            listAllJTextField.setEditable(false);
            displayTextArea.setText("");
        }
    }//GEN-LAST:event_listAllJRadioButtonItemStateChanged
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       palindromicJRadioButtonMenuItemActionPerformed
     * Description  Select palindromic radio button.
     * Date         5/18/2021
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void palindromicJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_palindromicJRadioButtonMenuItemActionPerformed
    {//GEN-HEADEREND:event_palindromicJRadioButtonMenuItemActionPerformed
        palindromicJRadioButton.setSelected(true);
    }//GEN-LAST:event_palindromicJRadioButtonMenuItemActionPerformed

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       fermatJRadioButtonActionPerformed()
     * Description  Event of the Fermat radio button is selected.
     * Date         5/18/21
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void fermatJRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fermatJRadioButtonActionPerformed
        fermatJRadioButtonMenuItem.setSelected(true);
    }//GEN-LAST:event_fermatJRadioButtonActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       fermatJRadioButtonMenuItemActionPerformed()
     * Description  Event of the Fermat menu is selected.
     * Date         5/18/21
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void fermatJRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fermatJRadioButtonMenuItemActionPerformed
        fermatJRadioButton.setSelected(true);
    }//GEN-LAST:event_fermatJRadioButtonMenuItemActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       fermatJTextFieldActionPerformed()
     * Description  Event of the Fermat button is clicked
     * Date         5/18/21
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void fermatJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fermatJTextFieldActionPerformed
        calculateJButtonActionPerformed(evt);
    }//GEN-LAST:event_fermatJTextFieldActionPerformed
    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       fermatJRadioButtonItemStateChanged()
     * Description  Event of the state of the Fermat button is changed
     * Date         5/18/21
     * @param       evt ActionEvent
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void fermatJRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fermatJRadioButtonItemStateChanged
        // Enable corresponding text field
        if (fermatJRadioButton.isSelected()) {
            whichRadio = 10;
            fermatJTextField.setEditable(true);
            fermatJTextField.requestFocus();
        } else {
            fermatJTextField.setText("");
            fermatJTextField.setEditable(false);
            displayTextArea.setText("");
        }
    }//GEN-LAST:event_fermatJRadioButtonItemStateChanged

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * <pre>
     * Method       main()
     * Description  Displays splash screen and main Philosophers GUI form
     * Date         4/7/2020
     * History log
     * @param       args are the command line strings
     * @author      <i>Robert Tang</i>
     * </pre>
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    public static void main(String args[]) {
        // Show splash screen
        Splash mySplash = new Splash(1500);     // duration = 4 seconds
        mySplash.showSplash();                  // show splash screen
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrimesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrimesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrimesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrimesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PrimesGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutrJMenuItem;
    private javax.swing.JMenu actionJMenu;
    private javax.swing.JButton calculateJButton;
    private javax.swing.JPanel choiceJPanel;
    private javax.swing.JButton clearJButton;
    private javax.swing.JMenuItem clearJMenuItem;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JPanel displayJPanel;
    private javax.swing.JScrollPane displayJScrollPanel;
    private javax.swing.JTextArea displayTextArea;
    private javax.swing.JRadioButton emirpJRadioButton;
    private javax.swing.JRadioButtonMenuItem emirpJRadioButtonMenuItem;
    private javax.swing.JTextField emirpJTextField;
    private javax.swing.JMenuItem exitJMenuItem;
    private javax.swing.JRadioButton factorizationJRadioButton;
    private javax.swing.JTextField factorizationJTextField;
    private javax.swing.JRadioButton fermatJRadioButton;
    private javax.swing.JRadioButtonMenuItem fermatJRadioButtonMenuItem;
    private javax.swing.JTextField fermatJTextField;
    private javax.swing.JMenu fileJMenu;
    private javax.swing.JLabel fromJLabel;
    private javax.swing.JRadioButton goldbachJRadioButton;
    private javax.swing.JRadioButtonMenuItem goldbachJRadioButtonMenuItem;
    private javax.swing.JTextField goldbachJTextField;
    private javax.swing.JMenu helpJMenu;
    private javax.swing.JTextField highJTextField;
    private javax.swing.JRadioButton isPrimeJRadioButton;
    private javax.swing.JTextField isPrimeJTextField;
    private javax.swing.JRadioButton listAllJRadioButton;
    private javax.swing.JTextField listAllJTextField;
    private javax.swing.JRadioButtonMenuItem listPrimesJRadioButtonMenuItem;
    private javax.swing.JTextField lowJTextField;
    private javax.swing.ButtonGroup menuJButtonGroup;
    private javax.swing.JRadioButton palindromicJRadioButton;
    private javax.swing.JRadioButtonMenuItem palindromicJRadioButtonMenuItem;
    private javax.swing.JTextField palindromicJTextField;
    private javax.swing.JRadioButtonMenuItem primeFactorizationJRadioButtonMenuItem;
    private javax.swing.JMenuBar primesJMenuBar;
    private javax.swing.JButton printJButton;
    private javax.swing.JMenuItem printJMenuItem;
    private javax.swing.JButton quitJButton;
    private javax.swing.ButtonGroup radioJButtonGroup;
    private javax.swing.JRadioButton rangeJRadioButton;
    private javax.swing.JRadioButtonMenuItem rangeOfPrimesJRadioButtonMenuItem;
    private javax.swing.JRadioButton safeJRadioButton;
    private javax.swing.JRadioButtonMenuItem safeJRadioButtonMenuItem;
    private javax.swing.JTextField safeJTextField;
    private javax.swing.JRadioButton sophieGermainJRadioButton;
    private javax.swing.JRadioButtonMenuItem sophieGermainJRadioButtonMenuItem;
    private javax.swing.JTextField sophieGermainJTextField;
    private javax.swing.JRadioButtonMenuItem testForPrimeJRadioButtonMenuItem;
    private javax.swing.JLabel toJLabel;
    // End of variables declaration//GEN-END:variables
}
